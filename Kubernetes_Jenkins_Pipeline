Jenkins Machine
----------------
sudo apt update
sudo apt install openjdk-8-jdk -y

Jenkins Installation
---------------------
wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -
sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'

sudo apt update
sudo apt install jenkins
sudo systemctl start jenkins
sudo systemctl enable jenkins

sudo cat /var/lib/jenkins/secrets/initialAdminPassword

sudo curl -fsSL get.docker.com | /bin/bash
sudo usermod -aG docker jenkins
sudo systemctl restart jenkins

Master Machine and Worker Machine
---------------------------------
sudo apt-get update 
sudo apt-get install -y apt-transport-https

sudo su -

curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb http://apt.kubernetes.io/ kubernetes-xenial main
EOF

swapoff -a
sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

modprobe br_netfilter
sysctl -p
sysctl net.bridge.bridge-nf-call-iptables=1

apt-get update -y
apt install docker.io -y
usermod -aG docker ubuntu
apt-get install -y kubelet kubeadm kubectl kubernetes-cni


systemctl daemon-reload
systemctl start kubelet
systemctl enable kubelet.service

On Master Machine
-----------------
kubeadm init

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"



kubectl get nodes
kubectl get pods --all-namespaces



	
Maven Integration
	
CloudBees Docker Build and Publish plugin
	
Kubernetes Continuous Deploy Plugin



node
{
    stage('SCM CheckOut'){
		git credentialsId: 'github', url: 'https://github.com/Naresh240/spring-boot-mongo-docker-master.git'
    }
	stage('Build Maven'){
		def MAVEN_HOME = tool name: 'maven3', type: 'maven'
		def MVN_CMD="${MAVEN_HOME}/bin/mvn"  
	    sh "${MVN_CMD} clean  package"
	}
	stage('build docker image') {
		sh 'docker build -t naresh240/spring-boot-mongo-docker-master .'
	}
	stage('push docker image'){
    withCredentials([string(credentialsId: 'dockerpwd', variable: 'docker')]) {
    sh 'docker login -u naresh240 -p ${docker}'
		}
	sh 'docker push naresh240/spring-boot-mongo-docker-master'
	}
	stage('Deploy Application on K82 Cluster'){
		kubernetesDeploy(
			configs: 'springBootMongo.yml',
			kubeconfigId: 'Kubernetes_Cluster_Config',
			enableConfigSubstitution: true
		)
	}	
}


deploy with jenkins server:

Install kubectl and kubeconfig on Jenkins Machine:

sudo apt-get update && sudo apt-get install -y apt-transport-https
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
sudo apt-get install -y kubectl

kubeconfig:

sudo -i -u jenkins
mkdir -p .kube
vi .kube/config

copy data from Master Machine and paste here

kubectl get pods

kubectl delete rc <pod-name>

kubectl get svc

kubectl delete svc <service-name>

Another way to Deploy (using pipe line) just replace Deploy code:

stage('Deploy Application on K82 Cluster'){
	sh 'kubectl apply -f springBootMongo.yml'
}

kubectl get pods
kubectl get svc




















