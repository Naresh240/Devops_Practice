Dynamic Volume Provisioning in Kubernetes
#########################################

sc.yml
######
kind: StorageClass
apiVersion: v1
metadata:
  name: fast
provisioner: kubernetes.io/aws-ebs
parameters:
  type: pd-ssd

kubectl create -f sc.yml
kubectl get storageclass 
kubectl describe storageclass fast
------------------------------------------
pvc1.yml
######### 
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mypvc1
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi
  storageClassName: fast
  
kubectl create -f pvc1.yml
kubectl get pvc
-----------------------------------------------------------

pvc2.yml
#########
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mypvc2
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi
  storageClassName: fast
  
kubectl create -f pvc2.yml
kubectl get pvc
--------------------------------------------------------
  
pod.yml
########
apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers:
  - name: test-container
    image: nginx
    volumeMounts:
    - mountPath: /mypd
      name: test-volume
  volumes:
  - name: test-volume
    persistentVolumeClaim:
      claimName: mypvc1


kubectl create -f pod.yml
kubectl get po -o wide


kubectl exec mypod -it -- /bin/sh
df -h /usr/share/nginx/html
cd /mypd
echo "From first pod">test.txt
exit

kubectl exec mypod df /mypd
kubectl exec mypod ls /mypd
kubectl exec mypod cat /mypd/test.txt

Clean-UP
--------------------------
kubectl delete pod mypod
or
kubectl delete -f pod.yml

kubectl delete -f pvc1.yml
or
kubectl delete pvc mypvc1 mypvc2

kubectl delete -f sc.yml
or 
kubectl delete sc fast


